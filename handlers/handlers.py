from aiogram import Bot, Router, types
from aiogram.filters import Command
import sqlite3
import os
import aiohttp
from lexicon.lexicon import LEXICON_RU
from config_data.config import Config, load_config
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

class values(StatesGroup):
    eur = State()
    rub = State()
    gbp = State()
    jpy = State()
    cny = State()





router = Router()
config: Config = load_config()
bot = Bot(token=config.tg_bot.token)
api_key = config.tg_bot.api_key

# –°–æ–∑–¥–∞—ë–º –∫—Ä–∞—Å–∏–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[
                [types.KeyboardButton(text="üí∏ –ö—É—Ä—Å –≤–∞–ª—é—Ç"), types.KeyboardButton(text="üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É")],
                [types.KeyboardButton(text="ü§ñ –û –±–æ—Ç–µ"), types.KeyboardButton(text="‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
            ]
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ API Open Exchange Rates
async def get_exchange_rates():
    url = f"https://openexchangerates.org/api/latest.json?app_id={api_key}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            return data.get("rates", {})


if not os.path.exists("currency.db"):
    conn = sqlite3.connect("currency.db")
    cursor = conn.cursor()
    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    cursor.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT)")
    conn.commit()
    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("currency.db")
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()
    conn.close()

    await message.answer(text=LEXICON_RU['/start'], reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def start_command(message: types.Message):
    await message.answer(text=LEXICON_RU['/help'], reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ö—É—Ä—Å –≤–∞–ª—é—Ç"
@router.message(lambda message: message.text == "üí∏ –ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def currency_rates(message: types.Message):
    rates = await get_exchange_rates()
    if rates:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å —ç–º–æ–¥–∑–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        response = "üí∏ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (USD):</b>\n\n"
        response += "\n".join([f" <b>{currency}</b>: {rate}" for currency, rate in rates.items() if currency in ["EUR", "RUB", "GBP", "JPY", "CNY"]])
    else:
        response = " ‚ùó <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>"

    await message.answer(response, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
@router.message(lambda message: message.text == "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É")
async def convert_currency(message: types.Message):
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [{"text": " USD –≤ EUR", "callback_data": "convert_usd_eur"}],
            [{"text": " USD –≤ RUB", "callback_data": "convert_usd_rub"}],
            [{"text": " USD –≤ GBP", "callback_data": "convert_usd_gbp"}],
            [{"text": " USD –≤ JPY", "callback_data": "convert_usd_jpy"}],
            [{"text": " USD –≤ CNY", "callback_data": "convert_usd_cny"}]
        ]
    )

    await message.answer(
            "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:</b>", reply_markup=keyboard, parse_mode="HTML"
    )

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class ConvertState(StatesGroup):
    conversion = State()  # –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    amount = State()  # –í–≤–µ–¥—ë–Ω–Ω–∞—è —Å—É–º–º–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@router.callback_query(lambda c: c.data.startswith("convert"))
async def process_conversion(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data
    rates = await get_exchange_rates()

    if rates:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        await state.update_data(conversion=data, rates=rates)

        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USD, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:"
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
        await state.set_state(ConvertState.amount)
    else:
        await callback_query.message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(lambda message: message.text.isdigit())
async def get_amount(message: Message, state: FSMContext):
    user_data = await state.get_data()
    conversion = user_data.get("conversion")
    rates = user_data.get("rates")
    amount = float(message.text)

    if not rates:
        await message.answer("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ö–∞—Ä—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    conversion_map = {
        "convert_usd_eur": "EUR",
        "convert_usd_rub": "RUB",
        "convert_usd_gbp": "GBP",
        "convert_usd_jpy": "JPY",
        "convert_usd_cny": "CNY",
    }

    target_currency = conversion_map.get(conversion)
    if target_currency and target_currency in rates:
        rate = rates[target_currency]
        result = amount * rate
        response = f"üí∑ <b>{amount} USD = {result:.2f} {target_currency}</b>"
    else:
        response = "‚ùó <b>–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</b>"

    await message.answer(response, parse_mode="HTML")
    await state.clear()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–û –±–æ—Ç–µ"
@router.message(lambda message: message.text == "ü§ñ –û –±–æ—Ç–µ")
async def about_bot(message: types.Message):
    await message.answer(text=LEXICON_RU['–û –±–æ—Ç–µ'], parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
@router.message(lambda message: message.text == "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer(text=LEXICON_RU['–ü–æ–¥–¥–µ—Ä–∂–∫–∞'], parse_mode="HTML")


